/**
 * This file auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../environments";
import * as core from "../../../core";
import { FinixApi } from "../../..";
import urlJoin from "url-join";
import * as serializers from "../../../serialization";

export declare namespace Client {
  interface Options {
    environment?: environments.Environment | string;
    auth?: {
      credentials?: core.Supplier<core.BasicAuth>;
    };
  }
}

export class Client {
  constructor(private readonly options: Client.Options) {}

  public async create(
    request: FinixApi.identities.CreateIdentityRequest
  ): Promise<FinixApi.identities.create.Response> {
    const response = await core.fetcher({
      url: urlJoin(this.options.environment ?? environments.Environment.Production, "/identities/"),
      method: "POST",
      headers: {
        Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.auth?.credentials)),
      },
      body: serializers.identities.CreateIdentityRequest.json(request),
    });
    if (response.ok) {
      return {
        ok: true,
        body: serializers.identities.CreateIdentityResponse.parse(
          response.body as serializers.identities.CreateIdentityResponse.Raw
        ),
      };
    }

    return {
      ok: false,
      error: {
        errorName: undefined,
        content: response.error,
        _visit: (visitor) => visitor._other(response.error),
      },
    };
  }
}
