/**
 * This file auto-generated by Fern from our API Definition.
 */

import { FinixApi } from "../../..";

/**
 * An Identity resource represents either a person or business in Finix. You'll create an Identity to onboard your sellers, and verify the different owners.
 */
export type CreateIdentityRequest =
  | CreateIdentityRequest.Merchant
  | CreateIdentityRequest.Buyer
  | CreateIdentityRequest._Unknown;

export declare namespace CreateIdentityRequest {
  interface Merchant extends FinixApi.identities.MerchantRequest, _Utils {
    type: "merchant";
  }

  interface Buyer extends FinixApi.identities.BuyerRequest, _Utils {
    type: "buyer";
  }

  interface _Unknown extends _Utils {
    type: void;
  }

  interface _Utils {
    _visit: <Result>(visitor: CreateIdentityRequest._Visitor<Result>) => Result;
  }

  interface _Visitor<Result> {
    merchant: (value: FinixApi.identities.MerchantRequest) => Result;
    buyer: (value: FinixApi.identities.BuyerRequest) => Result;
    _other: (value: { type: string }) => Result;
  }
}

export const CreateIdentityRequest = {
  merchant: (value: FinixApi.identities.MerchantRequest): CreateIdentityRequest.Merchant => {
    const valueWithoutVisit: Omit<CreateIdentityRequest.Merchant, "_visit"> = {
      ...value,
      type: "merchant",
    };
    Object.defineProperty(valueWithoutVisit, "_visit", {
      enumerable: false,
      writable: true,
    });
    const castedValue = valueWithoutVisit as CreateIdentityRequest.Merchant;
    castedValue._visit = (visitor) => visitor.merchant(value);
    return castedValue;
  },

  buyer: (value: FinixApi.identities.BuyerRequest): CreateIdentityRequest.Buyer => {
    const valueWithoutVisit: Omit<CreateIdentityRequest.Buyer, "_visit"> = {
      ...value,
      type: "buyer",
    };
    Object.defineProperty(valueWithoutVisit, "_visit", {
      enumerable: false,
      writable: true,
    });
    const castedValue = valueWithoutVisit as CreateIdentityRequest.Buyer;
    castedValue._visit = (visitor) => visitor.buyer(value);
    return castedValue;
  },
} as const;
