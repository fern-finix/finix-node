/**
 * This file auto-generated by Fern from our API Definition.
 */

import { FinixApi } from "../../..";
import * as core from "../../../core";
import * as serializers from "../..";

export const CreateIdentityResponse: core.schemas.Schema<
  CreateIdentityResponse.Raw,
  FinixApi.identities.CreateIdentityResponse
> = core.schemas
  .union("type", {
    merchant: core.schemas.lazyObject(() => serializers.identities.MerchantResponse),
    buyer: core.schemas.lazyObject(() => serializers.identities.BuyerResponse),
    associated: core.schemas.lazyObject(() => serializers.identities.AssociatedResponse),
  })
  .transform<FinixApi.identities.CreateIdentityResponse>({
    parse: (value) => {
      switch (value.type) {
        case "merchant": {
          return FinixApi.identities.CreateIdentityResponse.merchant(value);
        }
        case "buyer": {
          return FinixApi.identities.CreateIdentityResponse.buyer(value);
        }
        case "associated": {
          return FinixApi.identities.CreateIdentityResponse.associated(value);
        }
        default: {
          return {
            ...(value as any),
            _visit: (visitor) => visitor._other(value),
          };
        }
      }
    },
    json: (value) => value as any,
  });

export declare namespace CreateIdentityResponse {
  type Raw = CreateIdentityResponse.Merchant | CreateIdentityResponse.Buyer | CreateIdentityResponse.Associated;

  interface Merchant extends serializers.identities.MerchantResponse.Raw {
    type: "merchant";
  }

  interface Buyer extends serializers.identities.BuyerResponse.Raw {
    type: "buyer";
  }

  interface Associated extends serializers.identities.AssociatedResponse.Raw {
    type: "associated";
  }
}
